#ifndef __OS_SET_H__
#define __OS_SET_H__
#include "os_tree.h"
#include "os_list.h"
typedef struct os_set_iterator
{
	tree_node_type_def tree_node;
	list_node_type_def list_node;
} os_set_iterator;

typedef struct os_set
{
	tree_node_type_def *tree;
	list_node_type_def *head;
	os_size_t unit_size;
	os_size_t size;
} os_set;

/*********************************************************************************************************************
* 初始化容器
* obj 容器对象
* unit_size 元素大小
*********************************************************************************************************************/
void os_set_init(os_set *obj, os_size_t unit_size);
/*********************************************************************************************************************
* 释放容器
* obj 容器对象
*********************************************************************************************************************/
void os_set_free(os_set *obj);
/*********************************************************************************************************************
* 获取容器大小
* obj 容器对象
*********************************************************************************************************************/
os_size_t os_set_size(os_set *obj);
/*********************************************************************************************************************
* 判断容器是否为空
* obj 容器对象
*********************************************************************************************************************/
os_size_t os_set_empty(os_set *obj);
/*********************************************************************************************************************
* 插入元素
* obj 容器对象
* data 数据
* return 0 成功插入
*********************************************************************************************************************/
os_size_t os_set_insert(os_set *obj, void *data);
/*********************************************************************************************************************
* 查找元素
* obj 容器对象
* data 数据
* return 对应的迭代器
*********************************************************************************************************************/
os_set_iterator *os_set_find(os_set *obj, void *data);
/*********************************************************************************************************************
* 移除元素
* obj 容器对象
* itr 要移除的数据
* return 0:成功移除
*********************************************************************************************************************/
os_size_t os_set_erase(os_set *obj, os_set_iterator *itr);
/*********************************************************************************************************************
* 清空所有元素
* obj 容器对象
*********************************************************************************************************************/
void os_set_clear(os_set *obj);
/*********************************************************************************************************************
* 解引用迭代器
* itr 迭代器
* retuan 数据指针
*********************************************************************************************************************/
void *os_set_value(os_set_iterator *itr);
/*********************************************************************************************************************
* 返回第一个值的迭代器 
* obj 容器对象
* retuan 迭代器
*********************************************************************************************************************/
os_set_iterator *os_set_begin(os_set *obj);
/*********************************************************************************************************************
* 返回下一个迭代器
* obj 容器对象
* itr 迭代器
* retuan 下一个迭代器
*********************************************************************************************************************/
os_set_iterator *os_set_next(os_set *obj, os_set_iterator *itr);
#endif