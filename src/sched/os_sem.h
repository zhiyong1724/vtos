#ifndef __OS_SEM_H__
#define __OS_SEM_H__
#include "base/os_list.h"
#include "base/os_tree.h"
#ifdef __cplusplus
extern "C"
{
#endif // __cplusplus
#define SEM_NAME_SIZE        32
	typedef struct os_sem_t
	{
		tree_node_type_def tree;
		os_size_t sem;
		list_node_type_def *wait_task_list;
		char name[SEM_NAME_SIZE];
	} os_sem_t;

	struct os_sem
	{
		tree_node_type_def *tree;
	};

	/*********************************************************************************************************************
	* 初始化信号量控制器
	*********************************************************************************************************************/
	void os_sem_init();
	/*********************************************************************************************************************
	* 卸载信号量控制器
	*********************************************************************************************************************/
	void os_sem_uninit();
	/*********************************************************************************************************************
	* 创建一个新的信号量
	* cnt：该信号量初始的信号个数
	* return：返回新的信号量
	*********************************************************************************************************************/
	os_sem_t *os_sem_create(os_size_t cnt, const char *name);
	/*********************************************************************************************************************
	* 获取一个信号，阻塞线程
	* p_sem：指向要获取信号的信号量
	* timeout：获取超时时间，单位ms，超时后直接返回，如果是0则表示不设置超时，线程被阻塞直到获取到信号
	* p_status：指向一个空间，函数返回后，会把获取状态存放到这个空间上
	*********************************************************************************************************************/
	void os_sem_pend(os_sem_t *p_sem, os_size_t timeout, os_size_t *p_status);
	/*********************************************************************************************************************
	* 释放出一个信号
	* p_sem：指向要释放信号的信号量
	*********************************************************************************************************************/
	os_size_t os_sem_post(os_sem_t *p_sem);
	/*********************************************************************************************************************
	* 使用名称获取信号量
	* name：信号量名称
	* return：信号量
	*********************************************************************************************************************/
	os_sem_t *os_sem_find(const char *name);
	/*********************************************************************************************************************
	* 释放一个信号量对象
	*********************************************************************************************************************/
	void os_sem_free(os_sem_t *p_sem);

	void os_remove_task_from_sem(os_sem_t *p_sem, list_node_type_def *node);
#ifdef __cplusplus
}
#endif // __cplusplus
#endif
