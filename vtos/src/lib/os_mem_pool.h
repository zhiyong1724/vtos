#ifndef _OS_MEM_POOL_H
#define _OS_MEM_POOL_H
#include "os_cpu.h"
struct mem_pool_def
{
	void *start;
	os_size_t total_count;
	os_size_t idle_count;
	os_size_t block_size;
};

/*********************************************************************************************************************
* 这个函数把一段内存空间格式化为一个内存池
* addr：指向要格式化的内存
* mem_size：这个内存的大小
* blk_size：内存池中块的大小,这个块的大小必须要保证能放下一个地址
* return 1：创建失败；0：创建成功
*********************************************************************************************************************/
os_size_t os_mem_pool_create(void *addr, os_size_t mem_size, os_size_t blk_size);
/*********************************************************************************************************************
* 从内存池中获取一个内存块
* addr：指向被格式化的内存池
* return：返回块的地址，如果获取失败则返回NULL
*********************************************************************************************************************/
void *os_mem_block_get(void *addr);
/*********************************************************************************************************************
* 释放一个内存块返回内存池，这个函数并没有安全检查功能，输入一个不相关的地址会出现不可预估的错误
* addr：指向被格式化的内存池
* block：属于该内存池分配的内存块
*********************************************************************************************************************/
void os_mem_block_put(void *addr, void *block);
/*********************************************************************************************************************
* 获取该内存池中块的数量
* addr：指向被格式化的内存池
* return：返回该内存池中块的数量
*********************************************************************************************************************/
os_size_t os_total_block_count(void *addr);
/*********************************************************************************************************************
* 获取该内存池中空闲块的数量
* addr：指向被格式化的内存池
* return：返回该内存池中空闲块的数量
*********************************************************************************************************************/
os_size_t os_idle_block_count(void *addr);
/*********************************************************************************************************************
* 获取该内存池块的大小
* addr：指向被格式化的内存池
* return：返回该内存池块的大小
*********************************************************************************************************************/
os_size_t os_block_size(void *addr);
#endif
