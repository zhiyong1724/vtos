#ifndef __OS_MEM_H__
#define __OS_MEM_H__
#include "base/os_tree.h"
#include "base/os_mem_pool.h"
#define MIN_BLOCK_SIZE 32
typedef struct mem_pool_node
{
	tree_node_type_def node;
	os_mem_pool pool;
	uint16 magic;
} mem_pool_node;

struct os_mem
{
	tree_node_type_def *root;
	os_size_t total_size;
	os_size_t free_size;
};
/*********************************************************************************************************************
* 初始化内存
* return：0：初始化成功
*********************************************************************************************************************/
os_size_t os_mem_init(void);
/*********************************************************************************************************************
* 内存分配函数，和os_kfree联合使用
* size：需要分配的内存大小
* return：返回指向分配内存空间的指针，如果分配失败，将返回NULL
*********************************************************************************************************************/
void *os_kmalloc(os_size_t size);
/*********************************************************************************************************************
* 内存释放函数，该函数与os_kmalloc联合使用
* addr：指向要释放内存的指针
*********************************************************************************************************************/
void os_kfree(void *addr);
/*********************************************************************************************************************
* 获得总内存大小
*********************************************************************************************************************/
os_size_t os_total_mem_size();
/*********************************************************************************************************************
* 获得可用内存大小
*********************************************************************************************************************/
os_size_t os_free_mem_size();
#endif
