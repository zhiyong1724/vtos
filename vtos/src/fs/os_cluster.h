#ifndef __OS_CLUSTER_H__
#define __OS_CLUSTER_H__
#include "fs/os_fs_def.h"
#define CLUSTER_MANAGER_SIZE 256
#define RETAIN_AREA_SIZE 16
#define BACKUP_AREA_COUNT 8
enum CLUSTER_CONTROL_STATUS
{
	CLUSTER_NONE,
	CLUSTER_READ_FAILED,
	CLUSTER_WRITE_FAILED,
};

struct cluster_manager
{
	uint32 cluster_id;
	uint32 used_cluster_count;
	uint32 total_cluster_count;
	uint32 cur_index;
	uint32 bitmap_size;
};

struct cluster_controler
{
	disk_info dinfo;
	struct cluster_manager *pcluster_manager;
	uint32 cache_id;
	uint8 *bitmap;
	uint32 divisor;
};
/*********************************************************************************************************************
* 加载簇管理器
* id1：存放id
* id1：备份的存放id
* return：0：加载成功；1：加载失败
*********************************************************************************************************************/
uint32 cluster_manager_load(uint32 id1, uint32 id2);
/*********************************************************************************************************************
* 把缓存数据写入磁盘
* return：0：写入成功；1：写入失败
*********************************************************************************************************************/
uint32 flush2();
/*********************************************************************************************************************
* 转换字节序
* src：源数据
* return：转换后的数据
*********************************************************************************************************************/
uint32 convert_endian(uint32 src);
/*********************************************************************************************************************
* 转换字节序
* src：源数据
* return：转换后的数据
*********************************************************************************************************************/
uint32 convert_endian(uint32 src);
/*********************************************************************************************************************
* 初始化簇管理器
* return：0：初始化失败；其他：簇ID
*********************************************************************************************************************/
uint32 cluster_manager_init();
/*********************************************************************************************************************
* 簇分配函数，和cluster_free联合使用
* return：分配到的簇id
*********************************************************************************************************************/
uint32 cluster_alloc();
/*********************************************************************************************************************
* 簇释放函数，和cluster_alloc联合使用
* cluster_id：要释放的簇id
*********************************************************************************************************************/
void cluster_free(uint32 cluster_id);
/*********************************************************************************************************************
* 簇读取函数
* cluster_id：簇id
* data：读取存放的数据
* return：CLUSTER_NONE：读取成功；CLUSTER_READ_FAILED：读取失败
*********************************************************************************************************************/
uint32 cluster_read(uint32 cluster_id, uint8 *data);
/*********************************************************************************************************************
* 簇写入函数
* cluster_id：簇id
* data：写入的数据
* return：CLUSTER_NONE：写入成功；CLUSTER_WRITE_FAILED：写入失败
*********************************************************************************************************************/
uint32 cluster_write(uint32 cluster_id, uint8 *data);
#endif