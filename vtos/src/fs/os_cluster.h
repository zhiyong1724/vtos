#ifndef __OS_CLUSTER_H__
#define __OS_CLUSTER_H__
#include "fs/os_fs_def.h"
#include "base/os_map.h"
#define FIRST_CLUSTER_MANAGER_ID (SUPER_CLUSTER_ID + 1)
#pragma pack(1)
typedef struct cluster_manager
{
	uint32 used_cluster_count;
	uint32 cur_index;
} cluster_manager;
#pragma pack()

typedef struct os_cluster
{
	uint32 cache_id;
	disk_info dinfo;
	struct cluster_manager *pcluster_manager;
	uint8 *bitmap;
	uint32 divisor;
	uint32 bitmap_size;
	uint32 total_cluster_count;
	os_map bitmaps;
	uint32 is_update;
	uint32 dev_id;
	void *journal;
} os_cluster;
/*********************************************************************************************************************
* 设置os_journal对象
* journal：os_journal对象
* cluster：os_cluster对象
*********************************************************************************************************************/
void set_journal(void *journal, os_cluster *cluster);
/*********************************************************************************************************************
* 把缓存数据写入磁盘
* cluster：os_cluster对象
*********************************************************************************************************************/
void cluster_flush(os_cluster *cluster);
/*********************************************************************************************************************
* 转换字节序
* src：源数据
* return：转换后的数据
*********************************************************************************************************************/
uint32 convert_endian(uint32 src);
/*********************************************************************************************************************
* 转换字节序
* src：源数据
* return：转换后的数据
*********************************************************************************************************************/
uint64 convert_endian64(uint64 src);
/*********************************************************************************************************************
* 初始化簇管理器
* cluster：os_cluster对象
*********************************************************************************************************************/
void cluster_manager_init(os_cluster *cluster);
/*********************************************************************************************************************
* 初始化簇控制器
* cluster：os_cluster对象
* dev_id：设备id
*********************************************************************************************************************/
void os_cluster_init(os_cluster *cluster, uint32 dev_id);
/*********************************************************************************************************************
* 释放簇管理器
* cluster：os_cluster对象
*********************************************************************************************************************/
void uninit(os_cluster *cluster);
/*********************************************************************************************************************
* 簇分配函数，和cluster_free联合使用
* cluster：os_cluster对象
* return：分配到的簇id
*********************************************************************************************************************/
uint32 cluster_alloc(os_cluster *cluster);
/*********************************************************************************************************************
* 簇释放函数，和cluster_alloc联合使用
* cluster：os_cluster对象
* cluster_id：要释放的簇id
*********************************************************************************************************************/
void cluster_free(uint32 cluster_id, os_cluster *cluster);
/*********************************************************************************************************************
* 簇读取函数
* cluster_id：簇id
* data：读取存放的数据
* cluster：os_cluster对象
*********************************************************************************************************************/
void cluster_read(uint32 cluster_id, uint8 *data, os_cluster *cluster);
/*********************************************************************************************************************
* 簇写入函数
* cluster_id：簇id
* data：写入的数据
* cluster：os_cluster对象
*********************************************************************************************************************/
void cluster_write(uint32 cluster_id, uint8 *data, os_cluster *cluster);
/*********************************************************************************************************************
* 加载簇管理器
* cluster：os_cluster对象
*********************************************************************************************************************/
void cluster_manager_load(os_cluster *cluster);
/*********************************************************************************************************************
* 获取总簇数量
* cluster：os_cluster对象
*********************************************************************************************************************/
uint32 get_all_cluster_num(os_cluster *cluster);
/*********************************************************************************************************************
* 获取剩余簇数量
* cluster：os_cluster对象
*********************************************************************************************************************/
uint32 get_free_cluster_num(os_cluster *cluster);
#endif