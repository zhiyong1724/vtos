#ifndef __OS_DENTRY_H__
#define __OS_DENTRY_H__
#include "fs/os_cluster.h"
#define FS_TNODE_SIZE 128
#pragma pack(1)
typedef struct tnode
{
	uint32 node_id;
	uint32 pointers[FS_MAX_KEY_NUM + 1];
	uint32 num;
	uint32 leaf;
	uint32 non[12];
} tnode;
#pragma pack()

#pragma pack(1)
typedef struct fnode
{
	tnode head;
	file_info finfo[FS_MAX_KEY_NUM];

} fnode;
#pragma pack()
/*********************************************************************************************************************
* 插入文件信息
* root：目录项根节点
* finfo：要插入的文件信息
* status：0:插入成功；1：插入失败
* return：目录项根节点
*********************************************************************************************************************/
fnode *insert_to_btree(fnode *root, file_info *finfo, uint32 *status);
/*********************************************************************************************************************
* 删除文件信息
* root：目录项根节点
* name：文件名
* status：0:删除成功；1：删除失败
* return：目录项根节点
*********************************************************************************************************************/
fnode *remove_from_btree(fnode *root, const char *name, uint32 *status);
/*********************************************************************************************************************
* 查找文件
* root：目录项根节点
* finfo：返回的文件信息
* name：要查找的文件名字
* return：0：查找成功；1：查找失败
*********************************************************************************************************************/
uint32 find_from_tree(fnode *root, file_info *finfo, const char *name);
/*********************************************************************************************************************
* 查找文件
* root：目录项根节点
* index：文件在fnode的指针
* name：要查找的文件名字
* return：文件所在的fnode
*********************************************************************************************************************/
fnode *find_from_tree2(fnode *root, uint32 *index, const char *name);
/*********************************************************************************************************************
* 遍历文件
* id：要遍历的目录id
* call_back：回调函数
* arg：传递给回调的参数
*********************************************************************************************************************/
void search_from_tree(uint32 id, void(*call_back)(file_info *finfo, void *arg), void *arg);
/*********************************************************************************************************************
* 把fnode写入磁盘
* node：要写入的fnode
* return：0：写入成功；1：写入失败
*********************************************************************************************************************/
uint32 fnode_flush(fnode *node);
/*********************************************************************************************************************
* 加载fnode
* id：cluster id
* return：加载到的fnode；NULL：加载失败
*********************************************************************************************************************/
fnode *fnode_load(uint32 id);
#endif