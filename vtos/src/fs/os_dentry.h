#ifndef __OS_DENTRY_H__
#define __OS_DENTRY_H__
#include "fs/os_cluster.h"
#define FS_TNODE_SIZE 128
typedef struct tnode
{
	uint32 node_id;
	uint32 pointers[FS_MAX_KEY_NUM + 1];
	uint32 num;
	uint32 leaf;
	uint32 non[12];
} tnode;

typedef struct fnode
{
	tnode head;
	file_info finfo[FS_MAX_KEY_NUM];

} fnode;
/*********************************************************************************************************************
* 插入文件信息
* root：目录项根节点
* finfo：要插入的文件信息
* status：0:插入成功；1：插入失败
* return：目录项根节点
*********************************************************************************************************************/
fnode *insert_to_btree(fnode *root, file_info *finfo, uint32 *status);
/*********************************************************************************************************************
* 删除文件信息
* root：目录项根节点
* name：文件名
* status：0:删除成功；1：删除失败
* return：目录项根节点
*********************************************************************************************************************/
fnode *remove_from_btree(fnode *root, const char *name, uint32 *status);
/*********************************************************************************************************************
* 查找文件
* root：目录项根节点
* name：文件名称
* return：查找到的文件信息
*********************************************************************************************************************/
file_info *find_from_tree(fnode *root, const char *name);
/*********************************************************************************************************************
* 遍历文件
* id：要遍历的目录id
* files：存储遍历到的文件信息
* size：最多能存储多少个文件
* return：找到的文件数目
*********************************************************************************************************************/
uint32 search_from_tree(uint32 id, file_info *files, uint32 size);
#endif