#ifndef __OS_MEM_POOL_H__
#define __OS_MEM_POOL_H__
#include "os_cpu.h"
#include "os_vector.h"
#pragma pack()
typedef struct os_mem_pool
{
	void *start;
	os_size_t total_count;
	os_size_t idle_count;
	os_size_t block_size;
} os_mem_pool;
#pragma pack()
/*********************************************************************************************************************
* 创建一个内存池
* blk_size：内存池中块的大小,这个块的大小必须要保证能放下一个地址
* return os_mem_pool
*********************************************************************************************************************/
os_mem_pool *os_mem_pool_create(os_size_t blk_size);
/*********************************************************************************************************************
* 从内存池中获取一个内存块
* addr：指向被格式化的内存池
* return：返回块的地址，如果获取失败则返回NULL
*********************************************************************************************************************/
void *os_mem_block_get(void *addr);
/*********************************************************************************************************************
* 释放一个内存块返回内存池，这个函数并没有安全检查功能，输入一个不相关的地址会出现不可预估的错误
* addr：指向被格式化的内存池
* block：属于该内存池分配的内存块
*********************************************************************************************************************/
void os_mem_block_put(void *addr, void *block);
/*********************************************************************************************************************
* 获取该内存池中块的数量
* addr：指向被格式化的内存池
* return：返回该内存池中块的数量
*********************************************************************************************************************/
os_size_t os_total_block_count(void *addr);
/*********************************************************************************************************************
* 获取该内存池中空闲块的数量
* addr：指向被格式化的内存池
* return：返回该内存池中空闲块的数量
*********************************************************************************************************************/
os_size_t os_idle_block_count(void *addr);
/*********************************************************************************************************************
* 获取该内存池块的大小
* addr：指向被格式化的内存池
* return：返回该内存池块的大小
*********************************************************************************************************************/
os_size_t os_block_size(void *addr);
#endif
