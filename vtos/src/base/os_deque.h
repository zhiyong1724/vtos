#ifndef __OS_DEQUE_H__
#define __OS_DEQUE_H__
#include "os_list.h"
typedef struct os_deque
{
	list_node_type_def *array;
	os_size_t unit_size;
	os_size_t size;
	os_size_t begin_index;
	os_size_t end_index;
} os_deque;
/*********************************************************************************************************************
* 初始化容器
* obj 容器对象
* unit_size 元素大小
*********************************************************************************************************************/
void os_deque_init(os_deque *obj, os_size_t unit_size);
/*********************************************************************************************************************
* 释放容器
* obj 容器对象
*********************************************************************************************************************/
void os_deque_free(os_deque *obj);
/*********************************************************************************************************************
* 获取容器大小
* obj 容器对象
*********************************************************************************************************************/
os_size_t os_deque_size(os_deque *obj);
/*********************************************************************************************************************
* 判断容器是否为空
* obj 容器对象
*********************************************************************************************************************/
os_size_t os_deque_empty(os_deque *obj);
/*********************************************************************************************************************
* 从后面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
os_size_t os_deque_push_back(os_deque *obj, void *data);
/*********************************************************************************************************************
* 从前面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
os_size_t os_deque_push_front(os_deque *obj, void *data);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *os_deque_back(os_deque *obj);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *os_deque_front(os_deque *obj);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* n 元素位置
* return 返回的数据指针
*********************************************************************************************************************/
void *os_deque_at(os_deque *obj, os_size_t n);
/*********************************************************************************************************************
* 清空所有元素
* obj 容器对象
*********************************************************************************************************************/
void os_deque_clear(os_deque *obj);
/*********************************************************************************************************************
* 从后面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
os_size_t os_deque_pop_back(os_deque *obj);
/*********************************************************************************************************************
* 从前面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
os_size_t os_deque_pop_front(os_deque *obj);
#endif