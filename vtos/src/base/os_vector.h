#ifndef __OS_VECTOR_H__
#define __OS_VECTOR_H__
#include "os_cpu_def.h"
typedef struct os_vector
{
	uint8 *buff;
	os_size_t unit_size;
	os_size_t size;
	os_size_t max_size;
} os_vector;
/*********************************************************************************************************************
* 初始化容器
* obj 容器对象
* unit_size 元素大小
*********************************************************************************************************************/
void os_vector_init(os_vector *obj, os_size_t unit_size);
/*********************************************************************************************************************
* 初始化容器
* obj 容器对象
* unit_size 元素大小
* mem_size 空间大小
*********************************************************************************************************************/
void os_vector_init_ext(os_vector *obj, os_size_t unit_size, os_size_t mem_size);
/*********************************************************************************************************************
* 释放容器
* obj 容器对象
*********************************************************************************************************************/
void os_vector_free(os_vector *obj);
/*********************************************************************************************************************
* 获取容器大小
* obj 容器对象
*********************************************************************************************************************/
os_size_t os_vector_size(os_vector *obj);
/*********************************************************************************************************************
* 获取当前最大容量
* obj 容器对象
*********************************************************************************************************************/
os_size_t os_vector_max_size(os_vector *obj);
/*********************************************************************************************************************
* 判断容器是否为空
* obj 容器对象
*********************************************************************************************************************/
os_size_t os_vector_empty(os_vector *obj);
/*********************************************************************************************************************
* 调整容器最大容量
* obj 容器对象
* size 调整后的容量，只能比原来的大
* return 调整后的容量
*********************************************************************************************************************/
os_size_t os_vector_resize(os_vector *obj, os_size_t size);
/*********************************************************************************************************************
* 从后面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
os_size_t os_vector_push_back(os_vector *obj, void *data);
/*********************************************************************************************************************
* 从前面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
os_size_t os_vector_push_front(os_vector *obj, void *data);
/*********************************************************************************************************************
* 插入元素
* obj 容器对象
* data 数据
* n 插入位置
* return 元素数目
*********************************************************************************************************************/
os_size_t os_vector_insert(os_vector *obj, void *data, os_size_t n);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *os_vector_back(os_vector *obj);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *os_vector_front(os_vector *obj);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* n 元素位置
* return 返回的数据指针
*********************************************************************************************************************/
void *os_vector_at(os_vector *obj, os_size_t n);
/*********************************************************************************************************************
* 移除元素
* obj 容器对象
* n 元素位置
* return 0:成功移除
*********************************************************************************************************************/
os_size_t os_vector_erase(os_vector *obj, os_size_t n);
/*********************************************************************************************************************
* 清空所有元素
* obj 容器对象
*********************************************************************************************************************/
void os_vector_clear(os_vector *obj);
/*********************************************************************************************************************
* 从后面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
os_size_t os_vector_pop_back(os_vector *obj);
/*********************************************************************************************************************
* 从前面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
os_size_t os_vector_pop_front(os_vector *obj);
#endif